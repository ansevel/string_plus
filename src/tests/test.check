#include "../s21_string.h"
#include <string.h>
#include <stdio.h>

#test test_s21_memchr
    const char hello_str[] = "Hello world";
    const char empty_str[] = "\0";
    const char line_break[] = "\n\0";
    const char letter_with_l_break[] = "a\n\0";
    char match = 'l';
    char no_match = 'x';
    size_t n = 5, m = 1, k = 7;
    ck_assert_ptr_eq(s21_memchr(hello_str, match, n), memchr(hello_str, match, n));
    ck_assert_ptr_null(s21_memchr(hello_str, no_match, n));
    ck_assert_ptr_null(s21_memchr(empty_str, no_match, m));
    ck_assert_ptr_eq(s21_memchr(letter_with_l_break, 'a', k), memchr(letter_with_l_break, 'a', k));
    ck_assert_ptr_eq(s21_memchr(line_break, 'a', k), memchr(line_break, 'a', k));

#test test_s21_memcmp
    const char hello_str[] = "Hello world";
    const char school_str[] = "School 21";
    const char empty_str[] = "\0";
    const char space_str[] = " \0";
    int n = 10;
    ck_assert_int_eq(s21_memcmp(hello_str, hello_str, n), memcmp(hello_str, hello_str, n));
    ck_assert_int_eq(s21_memcmp(hello_str, school_str, n), memcmp(hello_str, school_str, n));
    ck_assert_int_eq(s21_memcmp(hello_str, empty_str, n), memcmp(hello_str, empty_str, n));
    ck_assert_int_eq(s21_memcmp(empty_str, empty_str, n), memcmp(empty_str, empty_str, n));
    ck_assert_int_eq(s21_memcmp(space_str, hello_str, n), memcmp(space_str, hello_str, n));
    ck_assert_int_eq(s21_memcmp(hello_str, school_str, 0), memcmp(hello_str, school_str, 0));

#test test_s21_memcpy
    const char hello_str[] = "Hello world";
    const char school_str[] = "School 21";
    const char letter_with_l_break[] = "a\n\0";
    const char space_str[] = " \0";
    const char line_break[] = "\n\0";
    const char empty_str[] = "\0";
    const char src[] = {'a', 'b', '\0', 'c'};
    int a = 0, b = 5;
    char dest[20] = {'\0'};
    char control_dest[20] = {'\0'};
    ck_assert_str_eq(s21_memcpy(dest, src, 4), memcpy(control_dest, src, 4));
    ck_assert_int_eq(dest[3], control_dest[3]);
    ck_assert_str_eq(s21_memcpy(dest, hello_str, b), memcpy(control_dest, hello_str, b));
    ck_assert_str_eq(s21_memcpy(dest, school_str, a), memcpy(control_dest, school_str, a));
    ck_assert_str_eq(s21_memcpy(dest, empty_str, 1), memcpy(control_dest, empty_str, 1));
    ck_assert_str_eq(s21_memcpy(dest, letter_with_l_break, 2), memcpy(control_dest, letter_with_l_break, 2));
    ck_assert_str_ne(s21_memcpy(dest, space_str, 2), memcpy(control_dest, line_break, 2));

#test test_s21_memset
    size_t a = 0, b = 5;
    char symb = 'x';
    char dest[10] = {'\0'};
    char control_dest[10] = {'\0'};
    ck_assert_str_eq(s21_memset(dest, symb, a), memset(control_dest, symb, a));
    ck_assert_str_eq(s21_memset(dest, symb, b), memset(control_dest, symb, b));

#test test_s21_strncat
    size_t n = 5, a = 0, b = 15;
    char dest[20] = {'\0'};
    char control_dest[20] = {'\0'};
    const char empty_str[] = "\0";
    const char school_str[] = "School 21";
    const char line_break[] = "\n\0";
    ck_assert_str_eq(s21_strncat(dest, empty_str, n), strncat(control_dest, empty_str, n));
    ck_assert_str_eq(s21_strncat(dest, school_str, b), strncat(control_dest, school_str, b));
    ck_assert_str_eq(s21_strncat(dest, empty_str, n), strncat(control_dest, empty_str, n));
    ck_assert_str_eq(s21_strncat(dest, school_str, n), strncat(control_dest, school_str, n));
    ck_assert_str_eq(s21_strncat(dest, school_str, a), strncat(control_dest, school_str, a));
    ck_assert_str_eq(s21_strncat(dest, line_break, n), strncat(control_dest, line_break, n));

#test test_s21_strchr
    char first = 'S';
    char last = '1';
    char not_match = 'x';
    char l_break = '\n';
    char null_ch = '\0';
    const char school_str[] = "School 21";
    const char empty_str[] = "\0";
    const char line_break[] = "\n\0";
    ck_assert_ptr_eq(s21_strchr(school_str, first), strchr(school_str, first));
    ck_assert_ptr_eq(s21_strchr(school_str, last), strchr(school_str, last));
    ck_assert_ptr_eq(s21_strchr(school_str, not_match), strchr(school_str, not_match));
    ck_assert_ptr_eq(s21_strchr(line_break, l_break), strchr(line_break, l_break));
    ck_assert_ptr_eq(s21_strchr(empty_str, not_match), strchr(empty_str, not_match));
    ck_assert_ptr_eq(s21_strchr(school_str, null_ch), strchr(school_str, null_ch));

#test test_s21_strncmp
    size_t a = 0, b = 5, c = 15;
    const char school_str[] = "School 21";
    const char empty_str[] = "\0";
    const char line_break[] = "\n\0";
    const char hello_str[] = "Hello world";
    const char space_str[] = " \0";
    ck_assert_int_eq(s21_strncmp(school_str, school_str, b), strncmp(school_str, school_str, b));
    ck_assert_int_eq(s21_strncmp(school_str, school_str, a), strncmp(school_str, school_str, a));
    ck_assert_int_eq(s21_strncmp(school_str, school_str, c), strncmp(school_str, school_str, c));
    ck_assert_int_eq(s21_strncmp(school_str, hello_str, b), strncmp(school_str, hello_str, b));
    ck_assert_int_eq(s21_strncmp(empty_str, empty_str, b), strncmp(empty_str, empty_str, b));
    ck_assert_int_eq(s21_strncmp(school_str, empty_str, b), strncmp(school_str, empty_str, b));
    ck_assert_int_eq(s21_strncmp(school_str, empty_str, a), strncmp(school_str, empty_str, a));
    ck_assert_int_eq(s21_strncmp(line_break, line_break, b), strncmp(line_break, line_break, b));
    ck_assert_int_eq(s21_strncmp(space_str, line_break, b), strncmp(space_str, line_break, b));

#test test_s21_strncpy
    const char hello_str[] = "Hello world";
    const char school_str[] = "School 21";
    const char letter_with_l_break[] = "a\n\0";
    const char space_str[] = " \0";
    const char line_break[] = "\n\0";
    const char empty_str[] = "\0";
    size_t a = 0, b = 5;
    char dest[30] = {'\0'};
    char control_dest[30] = {'\0'};
    ck_assert_str_eq(s21_strncpy(dest, hello_str, b), strncpy(control_dest, hello_str, b));
    ck_assert_str_eq(s21_strncpy(dest, school_str, a), strncpy(control_dest, school_str, a));
    ck_assert_str_eq(s21_strncpy(dest, empty_str, b), strncpy(control_dest, empty_str, b));
    ck_assert_str_eq(s21_strncpy(dest, letter_with_l_break, b), strncpy(control_dest, letter_with_l_break, b));
    ck_assert_str_ne(s21_strncpy(dest, space_str, b), strncpy(control_dest, line_break, b));

#test test_s21_strcspn
    const char school_str[] = "School 21";
    const char hello_str[] = "Hello world";
    const char empty_str[] = "\0";
    const char letter_with_l_break[] = "a\n\0";
    const char space_with_l_break[] = " \n\0";
    ck_assert_int_eq(s21_strcspn(school_str, hello_str), strcspn(school_str, hello_str));
    ck_assert_int_eq(s21_strcspn(hello_str, school_str), strcspn(hello_str, school_str));
    ck_assert_int_eq(s21_strcspn(hello_str, empty_str), strcspn(hello_str, empty_str));
    ck_assert_int_eq(s21_strcspn(empty_str, hello_str), strcspn(empty_str, hello_str));
    ck_assert_int_eq(s21_strcspn(letter_with_l_break, space_with_l_break), strcspn(letter_with_l_break, space_with_l_break));

#test test_s21_strlen
    const char hello_str[] = "Hello world";
    const char str_with_l_break[] = "Hello world\n\0";
    const char letter_with_l_break[] = "a\n\0";
    const char space_with_l_break[] = " \n\0";
    const char empty_str[] = "\0";
    ck_assert_int_eq(s21_strlen(hello_str), strlen(hello_str));
    ck_assert_int_eq(s21_strlen(str_with_l_break), strlen(str_with_l_break));
    ck_assert_int_eq(s21_strlen(letter_with_l_break), strlen(letter_with_l_break));
    ck_assert_int_eq(s21_strlen(space_with_l_break), strlen(space_with_l_break));
    ck_assert_int_eq(s21_strlen(empty_str), strlen(empty_str));

#test test_s21_strerror
    ck_assert_str_eq(s21_strerror(20), strerror(20));
    ck_assert_str_eq(s21_strerror(50), strerror(50));
    ck_assert_str_eq(s21_strerror(1000), strerror(1000));
    ck_assert_str_eq(s21_strerror(-10), strerror(-10));

#test test_s21_strpbrk
    const char hello_str[] = "Hello world";
    const char school_str[] = "School 21";
    const char str[] = "abcfg";
    const char space_str[] = " \0";
    const char empty_str[] = "\0";
    ck_assert_ptr_eq(s21_strpbrk(hello_str, school_str), strpbrk(hello_str, school_str));
    ck_assert_ptr_eq(s21_strpbrk(school_str, hello_str), strpbrk(school_str, hello_str));
    ck_assert_ptr_eq(s21_strpbrk(hello_str, str), strpbrk(hello_str, str));
    ck_assert_ptr_eq(s21_strpbrk(hello_str, empty_str), strpbrk(hello_str, empty_str));
    ck_assert_ptr_eq(s21_strpbrk(empty_str, hello_str), strpbrk(empty_str, hello_str));
    ck_assert_ptr_eq(s21_strpbrk(empty_str, empty_str), strpbrk(empty_str, empty_str));
    ck_assert_ptr_eq(s21_strpbrk(hello_str, hello_str), strpbrk(hello_str, hello_str));
    ck_assert_ptr_eq(s21_strpbrk(hello_str, space_str), strpbrk(hello_str, space_str));

#test test_s21_strrchr
    const char hello_str[] = "Hello world";
    const char empty_str[] = "\0";
    char last = 'd';
    char first = 'H';
    char middle = 'o';
    char not_match = 'x';
    char null_ch = '\0';
    ck_assert_ptr_eq(s21_strrchr(hello_str, last), strrchr(hello_str, last));
    ck_assert_ptr_eq(s21_strrchr(hello_str, first), strrchr(hello_str, first));
    ck_assert_ptr_eq(s21_strrchr(hello_str, middle), strrchr(hello_str, middle));
    ck_assert_ptr_eq(s21_strrchr(hello_str, not_match), strrchr(hello_str, not_match));
    ck_assert_ptr_eq(s21_strrchr(hello_str, null_ch), strrchr(hello_str, null_ch));
    ck_assert_ptr_eq(s21_strrchr(empty_str, not_match), strrchr(empty_str, not_match));
    ck_assert_ptr_eq(s21_strrchr(empty_str, null_ch), strrchr(empty_str, null_ch));

#test test_s21_strstr
    const char hello_str[] = "hello whenorlohekdkhexsjdf";
    const char needle[] = "hex";
    const char not_match[] = "not";
    const char many_match[] = "lo";
    const char one_letter[] = "o";
    const char empty_str[] = "\0";
    ck_assert_ptr_eq(s21_strstr(hello_str, needle), strstr(hello_str, needle));
    ck_assert_ptr_eq(s21_strstr(hello_str, not_match), strstr(hello_str, not_match));
    ck_assert_ptr_eq(s21_strstr(hello_str, many_match), strstr(hello_str, many_match));
    ck_assert_ptr_eq(s21_strstr(hello_str, one_letter), strstr(hello_str, one_letter));
    ck_assert_ptr_eq(s21_strstr(hello_str, empty_str), strstr(hello_str, empty_str));
    ck_assert_ptr_eq(s21_strstr(empty_str, empty_str), strstr(empty_str, empty_str));
    ck_assert_ptr_eq(s21_strstr(empty_str, not_match), strstr(empty_str, not_match));
    ck_assert_ptr_eq(s21_strstr(needle, needle), strstr(needle, needle));

#test test_s21_strtok_normal
    char test_str[] = "one two three four";
    char test_control_str[] = "one two three four";
    char delim[] = " ";
    char *item = s21_strtok(test_str, delim);
    char *control_item = strtok(test_control_str, delim);
    int flag_in_cycle = 0;
    while (item != S21_NULL && control_item != S21_NULL) {
        flag_in_cycle = 1;
        ck_assert_str_eq(item, control_item);
        item = s21_strtok(S21_NULL, delim);
        control_item = strtok(S21_NULL, delim);
    }
    ck_assert_ptr_eq(item, control_item);
    ck_assert_int_eq(flag_in_cycle, 1);

#test test_s21_strtok_empty_delim
    char test_str[] = "one two three four";
    char test_control_str[] = "one two three four";
    char delim[] = "";
    char *item = s21_strtok(test_str, delim);
    char *control_item = strtok(test_control_str, delim);
    int flag_in_cycle = 0;
    while (item != S21_NULL && control_item != S21_NULL) {
        flag_in_cycle = 1;
        ck_assert_str_eq(item, control_item);
        item = s21_strtok(S21_NULL, delim);
        control_item = strtok(S21_NULL, delim);
    }
    ck_assert_ptr_eq(item, control_item);
    ck_assert_int_eq(flag_in_cycle, 1);

#test test_s21_strtok_empty_str
    char test_str[] = "";
    char test_control_str[] = "";
    char delim[] = " ";
    char *item = s21_strtok(test_str, delim);
    char *control_item = strtok(test_control_str, delim);
    int flag_in_cycle = 0;
    while (item != S21_NULL && control_item != S21_NULL) {
        flag_in_cycle = 1;
        ck_assert_str_eq(item, control_item);
        item = s21_strtok(S21_NULL, delim);
        control_item = strtok(S21_NULL, delim);
    }
    ck_assert_ptr_eq(item, control_item);
    ck_assert_int_eq(flag_in_cycle, 0);

#test test_s21_strtok_delim_in_end
    char test_str[] = "abcd cd/";
    char test_control_str[] = "abcd cd/";
    char delim[] = "/";
    char *item = s21_strtok(test_str, delim);
    char *control_item = strtok(test_control_str, delim);
    int flag_in_cycle = 0;
    while (item != S21_NULL && control_item != S21_NULL) {
        flag_in_cycle = 1;
        ck_assert_str_eq(item, control_item);
        item = s21_strtok(S21_NULL, delim);
        control_item = strtok(S21_NULL, delim);
    }
    ck_assert_ptr_eq(item, control_item);
    ck_assert_int_eq(flag_in_cycle, 1);

#test test_s21_strtok_delim_in_start
    char test_str[] = "/abcd cd";
    char test_control_str[] = "/abcd cd";
    char delim[] = "/";
    char *item = s21_strtok(test_str, delim);
    char *control_item = strtok(test_control_str, delim);
    int flag_in_cycle = 0;
    while (item != S21_NULL && control_item != S21_NULL) {
        flag_in_cycle = 1;
        ck_assert_str_eq(item, control_item);
        item = s21_strtok(S21_NULL, delim);
        control_item = strtok(S21_NULL, delim);
    }
    ck_assert_ptr_eq(item, control_item);
    ck_assert_int_eq(flag_in_cycle, 1);

#test test_s21_strtok_delim_not_match
    char test_str[] = "/abcd cd kljfg";
    char test_control_str[] = "/abcd cd kljfg";
    char delim[] = "x";
    char *item = s21_strtok(test_str, delim);
    char *control_item = strtok(test_control_str, delim);
    int flag_in_cycle = 0;
    while (item != S21_NULL && control_item != S21_NULL) {
        flag_in_cycle = 1;
        ck_assert_str_eq(item, control_item);
        item = s21_strtok(S21_NULL, delim);
        control_item = strtok(S21_NULL, delim);
    }
    ck_assert_ptr_eq(item, control_item);
    ck_assert_int_eq(flag_in_cycle, 1);

#test test_s21_to_upper
    char *res = S21_NULL;
    char *str_1 = "abc123 AbC";
    char *str_2 = S21_NULL;
    res = s21_to_upper(str_1);
    ck_assert_str_eq(res, "ABC123 ABC");
    free(res);
    res = s21_to_upper(str_2);
    ck_assert_ptr_eq(res, S21_NULL);
    if (res != S21_NULL) free(res);

#test test_s21_to_lower
    char *res = S21_NULL;
    char *str_1 = "ABC123 abC";
    char *str_2 = S21_NULL;
    res = s21_to_lower(str_1);
    ck_assert_str_eq(res, "abc123 abc");
    if (res != S21_NULL) free(res);
    res = s21_to_upper(str_2);
    ck_assert_ptr_eq(res, S21_NULL);
    if (res != S21_NULL) free(res);

#test test_s21_insert
    char *str_1 = "This is test text";
    char *str_2 = "the best ";
    char *res = s21_insert(str_1, str_2, 8);
    ck_assert_str_eq(res, "This is the best test text");
    if (res != S21_NULL) free(res);
    char *str_3 = S21_NULL;
    res = s21_insert(str_3, str_2, 8);
    if (res != S21_NULL) free(res);

#test test_s21_trim
    const char trim_chars_1[] = " ";
    const char trim_chars_2[] = " !";
    const char str_1[] = " !Hello school21 !";
    char *str_2 = S21_NULL;
    char *res = s21_trim(str_1, trim_chars_1);
    ck_assert_str_eq(res, "!Hello school21 !");
    if (res != S21_NULL) free(res);
    res = s21_trim(str_1, trim_chars_2);
    ck_assert_str_eq(res, "Hello school21");
    if (res != S21_NULL) free(res);
    res = s21_trim(str_2, trim_chars_1);
    ck_assert_ptr_eq(res, S21_NULL);
    if (res != S21_NULL) free(res);

#test test_s21_sprinf_percent
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %%|";
    ck_assert_int_eq(s21_sprintf(str, format), sprintf(test_str, format));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_only_c
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %c|";
    char c = 'x';
    ck_assert_int_eq(s21_sprintf(str, format, c), sprintf(test_str, format, c));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_c_with_minus
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %-c|";
    char c = 'x';
    ck_assert_int_eq(s21_sprintf(str, format, c), sprintf(test_str, format, c));
    ck_assert_str_eq(str, test_str);


#test test_s21_sprintf_c_indentation_space_plus
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %10c|";
    char c = 'x';
    ck_assert_int_eq(s21_sprintf(str, format, c), sprintf(test_str, format, c));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_c_indentation_space_minus
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %-10c|";
    char c = 'x';
    ck_assert_int_eq(s21_sprintf(str, format, c), sprintf(test_str, format, c));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_c_indentation_zero_minus
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %-10c|";
    char c = 'x';
    ck_assert_int_eq(s21_sprintf(str, format, c), sprintf(test_str, format, c));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_c_indentation_zero_without_sign
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %10c|";
    char c = 'x';
    ck_assert_int_eq(s21_sprintf(str, format, c), sprintf(test_str, format, c));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_c_point
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %c|";
    char c = 'x';
    ck_assert_int_eq(s21_sprintf(str, format, c), sprintf(test_str, format, c));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_c_point_with_precision
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %3c|";
    char c = 'x';
    ck_assert_int_eq(s21_sprintf(str, format, c), sprintf(test_str, format, c));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_d_positive
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %d|";
    int d = 567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_d_negative
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %d|";
    int d = -567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_d_positive_with_plus
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %+d|";
    int d = 567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_d_negative_with_plus
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %+d|";
    int d = -567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_d_positive_with_space
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: % d|";
    int d = 567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_d_negative_with_space
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: % d|";
    int d = 567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_d_left_intend_space
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %+10d|";
    int d = 567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_d_rigth_intend_space
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %-10d|";
    int d = 567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_negative_d_rigth_intend_space
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %-10d|";
    int d = -567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_negative_d_left_intend_space
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %+10d|";
    int d = -567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_d_left_intend_zero
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %010d|";
    int d = 567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_d_try_rigth_intend_zero
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %010d|";
    int d = 567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_negative_d_try_rigth_intend_zero
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %-10d|";
    int d = -567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_negative_d_left_intend_zero
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %+10d|";
    int d = -567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_zero_point_with_d
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %.d|";
    int d = 0;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_width_zero_point_with_d
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %010.d|";
    int d = 0;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_zero_point_with_d_and_plus
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %+.d|";
    int d = 0;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_hd
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %hd|";
    short int hd = 32767;
    ck_assert_int_eq(s21_sprintf(str, format, hd), sprintf(test_str, format, hd));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_ld
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %ld|";
    long ld = -8446744073709551610L;
    ck_assert_int_eq(s21_sprintf(str, format, ld), sprintf(test_str, format, ld));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_u
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %u|";
    unsigned int u = 4294967295U;
    ck_assert_int_eq(s21_sprintf(str, format, u), sprintf(test_str, format, u));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_hu
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %hu|";
    unsigned short int hu = 32767;
    ck_assert_int_eq(s21_sprintf(str, format, hu), sprintf(test_str, format, hu));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_lu
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %lu|";
    unsigned long int lu = 18446744073709551615UL;
    ck_assert_int_eq(s21_sprintf(str, format, lu), sprintf(test_str, format, lu));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_o_normal
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %o|";
    int d = 102567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_o_with_prefix
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#o|";
    int d = 102567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_o_zero_with_sharp
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#o|";
    int d = 0;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_o_zero_point_with_sharp
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#.o|";
    int d = 0;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_o_zero_point_with_sharp_and_width
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#010.o|";
    int d = 0;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_o_zero_point_with_sharp_and_width_and_plus
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#010.o|";
    int d = 0;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_o_zero_point_with_sharp_and_width_and_minus
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#010.o|";
    int d = 0;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_x_normal
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %x|";
    int d = 102567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_X_normal
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %X|";
    int d = 102567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_x_with_prefix
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#x|";
    int d = 102567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_X_with_prefix
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#X|";
    int d = 102567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_x_zero_with_sharp
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#x|";
    int d = 0;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_x_zero_point_with_sharp
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#.x|";
    int d = 0;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_x_width_sharp
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#020x|";
    int d = 102345;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_x_zero_point_with_sharp_and_width
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#010.x|";
    int d = 0;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_x_zero_point_with_sharp_and_width_and_plus
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#010.x|";
    int d = 0;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_x_with_precision
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %#.20x";
    int d = 102567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);


#test test_s21_sprintf_x_point_width
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %010.x|";
    int d = 102567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_x_point_width_and
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %010.x|";
    int d = 102567;
    ck_assert_int_eq(s21_sprintf(str, format, d), sprintf(test_str, format, d));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_p
    char str[100];
    char test_str[100];
    const char format[] = "|This is result: %p|";
    int d = 102567;
    ck_assert_int_eq(s21_sprintf(str, format, &d), sprintf(test_str, format, &d));
    ck_assert_str_eq(str, test_str);


#test test_s21_sprintf_positive_lf_with_zero_intend_and_round
    char str[100];
    char test_str[100];
    const char format[] = "This is result %010.2lf|";
    double lf = 2.999995945555;
    ck_assert_int_eq(s21_sprintf(str, format, lf), sprintf(test_str, format, lf));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_double_less_one
    char str[100];
    char test_str[100];
    const char format[] = "This is result %lf|";
    double lf = 0.0032;
    ck_assert_int_eq(s21_sprintf(str, format, lf), sprintf(test_str, format, lf));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_double_less_one_precision_2
    char str[100];
    char test_str[100];
    const char format[] = "This is result %.2lf|";
    double lf = 0.0032;
    ck_assert_int_eq(s21_sprintf(str, format, lf), sprintf(test_str, format, lf));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_double_less_one__negative_precision_2
    char str[100];
    char test_str[100];
    const char format[] = "This is result %.2lf|";
    double lf = -0.0032;
    ck_assert_int_eq(s21_sprintf(str, format, lf), sprintf(test_str, format, lf));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_positive__with_plus_lf_with_zero_intend_and_round
    char str[100];
    char test_str[100];
    const char format[] = "This is result %+010.2lf|";
    double lf = 2.999995945555;
    ck_assert_int_eq(s21_sprintf(str, format, lf), sprintf(test_str, format, lf));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_negative_lf_with_zero_intend_and_round
    char str[100];
    char test_str[100];
    const char format[] = "This is result %010.2lf|";
    double lf = -2.999995945555;
    ck_assert_int_eq(s21_sprintf(str, format, lf), sprintf(test_str, format, lf));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_lf_without_frac_prcision_zero
    char str[100];
    char test_str[100];
    const char format[] = "This is result %.lf|";
    double lf = 7;
    ck_assert_int_eq(s21_sprintf(str, format, lf), sprintf(test_str, format, lf));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_long_double
    char str[100];
    char test_str[100];
    const char format[] = "This is result %.10Lf|";
    long double lf = 123.3948503984593;
    ck_assert_int_eq(s21_sprintf(str, format, lf), sprintf(test_str, format, lf));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_lf_without_frac_with_sharp
    char str[100];
    char test_str[100];
    const char format[] = "This is result %#.lf|";
    double lf = 7;
    ck_assert_int_eq(s21_sprintf(str, format, lf), sprintf(test_str, format, lf));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_lf_with_star
    char str[100];
    char test_str[100];
    const char format[] = "This is result %.*lf|";
    double lf = 7.23456;
    int prec = 2;
    ck_assert_int_eq(s21_sprintf(str, format, prec, lf), sprintf(test_str, format, prec, lf));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_lf_with_two_star
    char str[100];
    char test_str[100];
    const char format[] = "This is result %*.*lf|";
    double lf = 7.23456;
    int prec = 2;
    int wid = 10;
    ck_assert_int_eq(s21_sprintf(str, format, wid, prec, lf), sprintf(test_str, format, wid, prec, lf));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_e
    char str[100];
    char test_str[100];
    const char format[] = "This is result %e|";
    double for_e = -0.000032;
    ck_assert_int_eq(s21_sprintf(str, format, for_e), sprintf(test_str, format, for_e));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_e_with_precision
    char str[100];
    char test_str[100];
    const char format[] = "This is result %.3e|";
    double for_e = -0.000032;
    ck_assert_int_eq(s21_sprintf(str, format, for_e), sprintf(test_str, format, for_e));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_e_with_null_precision
    char str[100];
    char test_str[100];
    const char format[] = "This is result %.e|";
    double for_e = -0.000032;
    ck_assert_int_eq(s21_sprintf(str, format, for_e), sprintf(test_str, format, for_e));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_e_with_null_precision_sharp
    char str[100];
    char test_str[100];
    const char format[] = "This is result %#.e|";
    double for_e = -0.000032;
    ck_assert_int_eq(s21_sprintf(str, format, for_e), sprintf(test_str, format, for_e));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_e_whole
    char str[100];
    char test_str[100];
    const char format[] = "This is result %e|";
    double for_e = 3.0;
    ck_assert_int_eq(s21_sprintf(str, format, for_e), sprintf(test_str, format, for_e));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_e_almost_null
    char str[100];
    char test_str[100];
    const char format[] = "This is result %e|";
    double for_e = 0.00001;
    ck_assert_int_eq(s21_sprintf(str, format, for_e), sprintf(test_str, format, for_e));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_e_big
    char str[100];
    char test_str[100];
    const char format[] = "This is result %e|";
    double for_e = 12345678987.02;
    ck_assert_int_eq(s21_sprintf(str, format, for_e), sprintf(test_str, format, for_e));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_string
    char str[100];
    char test_str[100];
    const char format[] = "This is result %s|";
    char *s = "string";
    ck_assert_int_eq(s21_sprintf(str, format, s), sprintf(test_str, format, s));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_string_precision
    char str[100];
    char test_str[100];
    const char format[] = "This is result %.3s|";
    char *s = "string";
    ck_assert_int_eq(s21_sprintf(str, format, s), sprintf(test_str, format, s));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_string_width_space
    char str[100];
    char test_str[100];
    const char format[] = "This is result %10s|";
    char *s = "string";
    ck_assert_int_eq(s21_sprintf(str, format, s), sprintf(test_str, format, s));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_string_width_rigth
    char str[100];
    char test_str[100];
    const char format[] = "This is result %-10s|";
    char *s = "string";
    ck_assert_int_eq(s21_sprintf(str, format, s), sprintf(test_str, format, s));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_string_width_precision
    char str[100];
    char test_str[100];
    const char format[] = "This is result %10.3s|";
    char *s = "string";
    ck_assert_int_eq(s21_sprintf(str, format, s), sprintf(test_str, format, s));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_g_1
    char str[100];
    char test_str[100];
    const char format[] = "This is result %g|";
    double f = 123.12;
    ck_assert_int_eq(s21_sprintf(str, format, f), sprintf(test_str, format, f));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_g_2
    char str[100];
    char test_str[100];
    const char format[] = "This is result %g|";
    double f = 123.123456;
    ck_assert_int_eq(s21_sprintf(str, format, f), sprintf(test_str, format, f));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_g_3
    char str[100];
    char test_str[100];
    const char format[] = "This is result %g|";
    double f = 123456.123;
    ck_assert_int_eq(s21_sprintf(str, format, f), sprintf(test_str, format, f));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_g_4
    char str[100];
    char test_str[100];
    const char format[] = "This is result %G|";
    double f = 132.9873458903;
    ck_assert_int_eq(s21_sprintf(str, format, f), sprintf(test_str, format, f));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_g_5
    char str[100];
    char test_str[100];
    const char format[] = "This is result %#.G|";
    double f = -0.000032;
    ck_assert_int_eq(s21_sprintf(str, format, f), sprintf(test_str, format, f));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_g_whole_without_sharp
    char str[100];
    char test_str[100];
    const char format[] = "This is result %.g|";
    double f = 3.0;
    ck_assert_int_eq(s21_sprintf(str, format, f), sprintf(test_str, format, f));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_g_whole_with_sharp
    char str[100];
    char test_str[100];
    const char format[] = "This is result %#.g|";
    double f = 3.0;
    ck_assert_int_eq(s21_sprintf(str, format, f), sprintf(test_str, format, f));
    ck_assert_str_eq(str, test_str);

#test test_s21_sprintf_two_specifiers
    char str[100];
    char test_str[100];
    const char format[] = "This is result %d second %s|";
    int d = 15;
    char *s = "string";
    ck_assert_int_eq(s21_sprintf(str, format, d, s), sprintf(test_str, format, d, s));
    ck_assert_str_eq(str, test_str);
